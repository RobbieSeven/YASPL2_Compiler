
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import compiler.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import nodes.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\006\000\002\002\004\000\002\005" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\012\000\002\012\004\000\002\012\002\000\002\013\004" +
    "\000\002\013\003\000\002\014\007\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\017\006\000\002" +
    "\017\005\000\002\017\006\000\002\017\011\000\002\017" +
    "\013\000\002\017\011\000\002\017\011\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\021\003\000\002\021\002\000\002\022\005\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\003\000\002\023\004\000\002\023\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\026\003\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\004\005\001\002\000\004\002\177\001" +
    "\002\000\014\005\ufffc\006\010\015\015\016\006\017\013" +
    "\001\002\000\010\014\ufff8\044\ufff8\046\ufff8\001\002\000" +
    "\004\014\061\001\002\000\004\014\155\001\002\000\014" +
    "\005\ufffc\006\010\015\015\016\006\017\013\001\002\000" +
    "\004\005\017\001\002\000\010\014\ufff7\044\ufff7\046\ufff7" +
    "\001\002\000\014\005\ufffc\006\010\015\015\016\006\017" +
    "\013\001\002\000\010\014\ufff9\044\ufff9\046\ufff9\001\002" +
    "\000\004\005\ufffe\001\002\000\024\007\031\012\022\014" +
    "\036\022\020\040\027\042\021\047\023\050\037\051\026" +
    "\001\002\000\014\014\044\022\020\040\027\047\023\050" +
    "\037\001\002\000\024\007\031\012\022\014\036\022\020" +
    "\040\027\042\021\047\023\050\037\051\026\001\002\000" +
    "\004\040\143\001\002\000\042\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\037\uffda\041\uffda\044\uffda\045\uffda\046\uffda" +
    "\001\002\000\016\021\046\022\050\023\052\024\051\037" +
    "\uffe0\044\141\001\002\000\030\002\uffea\007\uffea\012\uffea" +
    "\014\uffea\022\uffea\040\uffea\042\uffea\043\uffea\047\uffea\050" +
    "\uffea\051\uffea\001\002\000\006\037\uffdf\044\137\001\002" +
    "\000\014\014\044\022\020\040\027\047\023\050\037\001" +
    "\002\000\004\002\001\001\002\000\004\040\100\001\002" +
    "\000\004\037\076\001\002\000\030\002\uffeb\007\uffeb\012" +
    "\uffeb\014\uffeb\022\uffeb\040\uffeb\042\uffeb\043\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\001\002\000\030\002\ufffa\007\031\012" +
    "\022\014\036\022\020\040\027\042\021\043\ufffa\047\023" +
    "\050\037\051\026\001\002\000\004\036\067\001\002\000" +
    "\024\020\042\021\uffd7\022\uffd7\023\uffd7\024\uffd7\036\ufff5" +
    "\037\uffd7\040\041\044\040\001\002\000\042\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\037\uffd9\041\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\001\002\000\004\014\061\001\002\000\016" +
    "\014\044\022\020\040\027\045\uffdd\047\023\050\037\001" +
    "\002\000\014\014\044\022\020\040\027\047\023\050\037" +
    "\001\002\000\014\021\046\022\050\023\052\024\051\046" +
    "\047\001\002\000\042\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\037\uffd7\041\uffd7\044\uffd7\045\uffd7\046\uffd7\001\002" +
    "\000\014\014\044\022\020\040\027\047\023\050\037\001" +
    "\002\000\014\014\uffd4\022\uffd4\040\uffd4\047\uffd4\050\uffd4" +
    "\001\002\000\030\002\uffe7\007\uffe7\012\uffe7\014\uffe7\022" +
    "\uffe7\040\uffe7\042\uffe7\043\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\001\002\000\014\014\uffd3\022\uffd3\040\uffd3\047\uffd3\050" +
    "\uffd3\001\002\000\014\014\uffd1\022\uffd1\040\uffd1\047\uffd1" +
    "\050\uffd1\001\002\000\014\014\uffd2\022\uffd2\040\uffd2\047" +
    "\uffd2\050\uffd2\001\002\000\042\021\046\022\050\023\052" +
    "\024\051\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\037\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\001\002\000\004\045\uffde\001\002\000\016\021\046\022" +
    "\050\023\052\024\051\044\064\045\uffdb\001\002\000\004" +
    "\045\057\001\002\000\004\014\061\001\002\000\004\041" +
    "\062\001\002\000\012\036\ufff5\041\ufff5\044\040\046\ufff5" +
    "\001\002\000\004\046\063\001\002\000\030\002\uffe6\007" +
    "\uffe6\012\uffe6\014\uffe6\022\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\001\002\000\014\014\044\022" +
    "\020\040\027\047\023\050\037\001\002\000\004\045\uffdc" +
    "\001\002\000\010\036\ufff6\041\ufff6\046\ufff6\001\002\000" +
    "\010\015\015\016\006\017\013\001\002\000\006\044\073" +
    "\046\ufff3\001\002\000\004\046\072\001\002\000\030\002" +
    "\uffe9\007\uffe9\012\uffe9\014\uffe9\022\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\047\uffe9\050\uffe9\051\uffe9\001\002\000\010\015" +
    "\015\016\006\017\013\001\002\000\004\046\ufff4\001\002" +
    "\000\006\002\ufffb\043\ufffb\001\002\000\004\046\077\001" +
    "\002\000\030\002\uffe8\007\uffe8\012\uffe8\014\uffe8\022\uffe8" +
    "\040\uffe8\042\uffe8\043\uffe8\047\uffe8\050\uffe8\051\uffe8\001" +
    "\002\000\022\014\044\022\020\035\106\040\103\047\023" +
    "\050\037\052\102\053\105\001\002\000\024\021\046\022" +
    "\050\023\052\024\051\026\130\027\134\030\131\031\132" +
    "\032\126\001\002\000\010\033\uffd0\034\uffd0\041\uffd0\001" +
    "\002\000\022\014\044\022\020\035\106\040\103\047\023" +
    "\050\037\052\102\053\105\001\002\000\010\033\110\034" +
    "\112\041\114\001\002\000\010\033\uffcf\034\uffcf\041\uffcf" +
    "\001\002\000\022\014\044\022\020\035\106\040\103\047" +
    "\023\050\037\052\102\053\105\001\002\000\010\033\uffce" +
    "\034\uffce\041\uffce\001\002\000\022\014\uffca\022\uffca\035" +
    "\uffca\040\uffca\047\uffca\050\uffca\052\uffca\053\uffca\001\002" +
    "\000\022\014\044\022\020\035\106\040\103\047\023\050" +
    "\037\052\102\053\105\001\002\000\022\014\uffc9\022\uffc9" +
    "\035\uffc9\040\uffc9\047\uffc9\050\uffc9\052\uffc9\053\uffc9\001" +
    "\002\000\010\033\110\034\112\041\uffcb\001\002\000\004" +
    "\010\115\001\002\000\004\042\021\001\002\000\006\011" +
    "\117\046\120\001\002\000\004\042\021\001\002\000\030" +
    "\002\uffe4\007\uffe4\012\uffe4\014\uffe4\022\uffe4\040\uffe4\042" +
    "\uffe4\043\uffe4\047\uffe4\050\uffe4\051\uffe4\001\002\000\004" +
    "\046\122\001\002\000\030\002\uffe5\007\uffe5\012\uffe5\014" +
    "\uffe5\022\uffe5\040\uffe5\042\uffe5\043\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\001\002\000\026\021\046\022\050\023\052\024" +
    "\051\026\130\027\134\030\131\031\132\032\126\041\133" +
    "\001\002\000\010\033\110\034\112\041\125\001\002\000" +
    "\010\033\uffcc\034\uffcc\041\uffcc\001\002\000\014\014\uffc7" +
    "\022\uffc7\040\uffc7\047\uffc7\050\uffc7\001\002\000\014\014" +
    "\044\022\020\040\027\047\023\050\037\001\002\000\014" +
    "\014\uffc4\022\uffc4\040\uffc4\047\uffc4\050\uffc4\001\002\000" +
    "\014\014\uffc5\022\uffc5\040\uffc5\047\uffc5\050\uffc5\001\002" +
    "\000\014\014\uffc8\022\uffc8\040\uffc8\047\uffc8\050\uffc8\001" +
    "\002\000\042\021\uffd5\022\uffd5\023\uffd5\024\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037" +
    "\uffd5\041\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000\014" +
    "\014\uffc6\022\uffc6\040\uffc6\047\uffc6\050\uffc6\001\002\000" +
    "\020\021\046\022\050\023\052\024\051\033\uffcd\034\uffcd" +
    "\041\uffcd\001\002\000\014\021\046\022\050\023\052\024" +
    "\051\041\133\001\002\000\016\014\044\022\020\040\027" +
    "\047\023\050\037\051\026\001\002\000\004\037\uffe1\001" +
    "\002\000\016\014\044\022\020\040\027\047\023\050\037" +
    "\051\026\001\002\000\004\037\uffe2\001\002\000\022\014" +
    "\044\022\020\035\106\040\103\047\023\050\037\052\102" +
    "\053\105\001\002\000\010\033\110\034\112\041\145\001" +
    "\002\000\004\013\146\001\002\000\004\042\021\001\002" +
    "\000\004\046\150\001\002\000\030\002\uffe3\007\uffe3\012" +
    "\uffe3\014\uffe3\022\uffe3\040\uffe3\042\uffe3\043\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\001\002\000\004\043\152\001\002\000" +
    "\034\002\uffec\007\uffec\011\uffec\012\uffec\014\uffec\022\uffec" +
    "\040\uffec\042\uffec\043\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\001\002\000\042\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\037\uffd6\041\uffd6\044\uffd6\045\uffd6\046\uffd6\001\002" +
    "\000\004\005\ufffd\001\002\000\004\040\156\001\002\000" +
    "\012\015\015\016\006\017\013\041\ufff0\001\002\000\004" +
    "\041\162\001\002\000\034\007\ufff0\012\ufff0\014\ufff0\015" +
    "\015\016\006\017\013\022\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\001\002\000\026\007\ufff1\012" +
    "\ufff1\014\ufff1\022\ufff1\040\ufff1\041\ufff1\042\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\001\002\000\004\045\163\001\002\000" +
    "\010\015\015\016\006\017\013\001\002\000\004\042\167" +
    "\001\002\000\012\015\015\016\006\017\013\042\uffee\001" +
    "\002\000\004\042\uffef\001\002\000\032\007\ufff0\012\ufff0" +
    "\014\ufff0\015\015\016\006\017\013\022\ufff0\040\ufff0\042" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000\014\005\ufff2" +
    "\006\ufff2\015\ufff2\016\ufff2\017\ufff2\001\002\000\024\007" +
    "\031\012\022\014\036\022\020\040\027\042\021\047\023" +
    "\050\037\051\026\001\002\000\004\043\173\001\002\000" +
    "\004\046\174\001\002\000\014\005\uffed\006\uffed\015\uffed" +
    "\016\uffed\017\uffed\001\002\000\004\046\176\001\002\000" +
    "\040\005\uffff\006\uffff\007\uffff\012\uffff\014\uffff\015\uffff" +
    "\016\uffff\017\uffff\022\uffff\040\uffff\041\uffff\042\uffff\047" +
    "\uffff\050\uffff\051\uffff\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\005\013\006\006\011\010\001\001\000\002" +
    "\001\001\000\004\007\174\001\001\000\002\001\001\000" +
    "\012\003\153\005\013\006\006\011\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\015\005\013\006" +
    "\006\011\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\027\007\034\015\032\016\033\017\024\020" +
    "\031\023\023\001\001\000\004\023\152\001\001\000\020" +
    "\004\150\007\034\015\032\016\033\017\024\020\031\023" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\074\007" +
    "\034\015\032\016\033\017\024\020\031\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\065\001\001\000\010\021\055\022\053\023\054" +
    "\001\001\000\004\023\042\001\001\000\004\024\044\001" +
    "\001\000\002\001\001\000\004\023\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\044\001\001\000\002" +
    "\001\001\000\004\024\044\001\001\000\002\001\001\000" +
    "\004\007\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\064\023" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\067\010\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\067\010\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\100\025\103\001\001\000\006" +
    "\024\044\027\126\001\001\000\002\001\001\000\006\023" +
    "\122\025\123\001\001\000\004\026\110\001\001\000\002" +
    "\001\001\000\006\023\100\025\106\001\001\000\004\026" +
    "\110\001\001\000\002\001\001\000\006\023\100\025\112" +
    "\001\001\000\002\001\001\000\004\026\110\001\001\000" +
    "\002\001\001\000\004\015\115\001\001\000\002\001\001" +
    "\000\004\015\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\044\027\126\001\001" +
    "\000\004\026\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\044\001\001\000\004\024\044\001\001" +
    "\000\006\020\137\023\023\001\001\000\002\001\001\000" +
    "\006\020\141\023\023\001\001\000\002\001\001\000\006" +
    "\023\100\025\143\001\001\000\004\026\110\001\001\000" +
    "\002\001\001\000\004\015\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\157\006\006\012\156\001\001\000\002\001" +
    "\001\000\010\005\157\006\006\012\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\164\006\006\013" +
    "\163\001\001\000\004\014\167\001\001\000\010\005\164" +
    "\006\006\013\165\001\001\000\002\001\001\000\010\005" +
    "\157\006\006\012\170\001\001\000\002\001\001\000\020" +
    "\004\171\007\034\015\032\016\033\017\024\020\031\023" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= HEAD Decls START Statements 
            {
              ProgramNode RESULT =null;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArrayList<DeclNode> decls = (ArrayList<DeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location statsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location statsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<StatNode> stats = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG0

				RESULT = new ProgramNode(decls, stats);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Var_decl ::= Type Vars SEMI 
            {
              VarDeclNode RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		VarsNode vars = (VarsNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG1

				 RESULT = new VarDeclNode(type, vars);
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Var_decl Decls 
            {
              ArrayList<DeclNode> RESULT =null;
		Location varDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		VarDeclNode varDecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<DeclNode> decls = (ArrayList<DeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG2

			  decls.add(varDecl);
			  RESULT = decls;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= Def_decl Decls 
            {
              ArrayList<DeclNode> RESULT =null;
		Location defDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location defDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		DefDeclNode defDecl = (DefDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<DeclNode> decls = (ArrayList<DeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3

			  decls.add(defDecl);
			  RESULT = decls;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decls ::= 
            {
              ArrayList<DeclNode> RESULT =null;
		//@@CUPDBG4

			  RESULT = new ArrayList<DeclNode>();
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= Stat Statements 
            {
              ArrayList<StatNode> RESULT =null;
		Location statxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location statxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StatNode stat = (StatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<StatNode> statements = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5

				   statements.add(stat);
				   RESULT = statements;
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statements ::= Stat 
            {
              ArrayList<StatNode> RESULT =null;
		Location statxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location statxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StatNode stat = (StatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6

				   RESULT = new ArrayList<StatNode>();
				   RESULT.add(stat);
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              String RESULT =null;
		//@@CUPDBG7

			 RESULT = "int";
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= DOUBLE 
            {
              String RESULT =null;
		//@@CUPDBG8

			 RESULT = "double";
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              String RESULT =null;
		//@@CUPDBG9

			 RESULT = "bool";
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Vars ::= NAME COMMA Vars 
            {
              VarsNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		VarsNode vars = (VarsNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10

			 IdentifierNode id = new IdentifierNode(name);
			 RESULT = new VarsNode(id, vars);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Vars ::= NAME 
            {
              VarsNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11

			 IdentifierNode id = new IdentifierNode(name);
			 RESULT = new VarsNode(id, null);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Types ::= Type COMMA Types 
            {
              ArrayList<String> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<String> types = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12

			  types.add(type);
			  RESULT = types;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Types ::= Type 
            {
              ArrayList<String> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13

			  RESULT = new ArrayList<String>();
			  RESULT.add(type);
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Def_decl ::= DEF NAME LPAR Var_decls RPAR COLON Par_decls Body 
            {
              DefDeclNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ArrayList<VarDeclNode> varDecls = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<VarDeclNode> parDecls = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BodyNode body = (BodyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14

				 IdentifierNode id = new IdentifierNode(name);
				 RESULT = new DefDeclNode(id, varDecls, parDecls, body);
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_decls ::= Var_decl Var_decls 
            {
              ArrayList<VarDeclNode> RESULT =null;
		Location varDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		VarDeclNode varDecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<VarDeclNode> varDecls = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15

				  varDecls.add(varDecl);
				  RESULT = varDecls;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var_decls ::= 
            {
              ArrayList<VarDeclNode> RESULT =null;
		//@@CUPDBG16

				  RESULT = new ArrayList<VarDeclNode>();
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Par_decls ::= Var_decl Par_decls 
            {
              ArrayList<VarDeclNode> RESULT =null;
		Location varDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		VarDeclNode varDecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location parDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location parDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<VarDeclNode> parDecls = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17

				  parDecls.add(varDecl);
				  RESULT = parDecls;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Par_decls ::= Var_decl 
            {
              ArrayList<VarDeclNode> RESULT =null;
		Location varDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		VarDeclNode varDecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18

				  RESULT = new ArrayList<VarDeclNode>();
				  RESULT.add(varDecl);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Body ::= LGPAR Var_decls Statements RGPAR SEMI 
            {
              BodyNode RESULT =null;
		Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<VarDeclNode> varDecls = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArrayList<StatNode> statements = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG19

			 RESULT = new BodyNode(varDecls, statements);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              CompStatNode RESULT =null;
		Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<StatNode> statements = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG20

				  RESULT = new CompStatNode(statements);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comp_stat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stat ::= Comp_stat 
            {
              StatNode RESULT =null;
		Location compStatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location compStatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CompStatNode compStat = (CompStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21

			 RESULT = compStat;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stat ::= Simple_stat 
            {
              StatNode RESULT =null;
		Location simpleStatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simpleStatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SimpleStatNode simpleStat = (SimpleStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22

			 RESULT = simpleStat;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Simple_stat ::= Vars READ Types SEMI 
            {
              SimpleStatNode RESULT =null;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		VarsNode vars = (VarsNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<String> types = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG23

					RESULT = new ReadNode(vars.getNames(), types);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Simple_stat ::= Out_values WRITE SEMI 
            {
              SimpleStatNode RESULT =null;
		Location outValuesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location outValuesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArrayList<OutValueNode> outValues = (ArrayList<OutValueNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG24

					RESULT = new WriteNode(outValues);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Simple_stat ::= NAME ASSIGN Expr SEMI 
            {
              SimpleStatNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG25

					IdentifierNode id = new IdentifierNode(name);
					RESULT = new AssignNode(id, expr);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Simple_stat ::= NAME LPAR Params COLON Vars RPAR SEMI 
            {
              SimpleStatNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ArrayList<ExprNode> params = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		VarsNode vars = (VarsNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG26

					IdentifierNode id = new IdentifierNode(name);
					RESULT = new CallNode(id, params, vars.getNames());
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Simple_stat ::= IF LPAR Bool_expr RPAR THEN Comp_stat ELSE Comp_stat SEMI 
            {
              SimpleStatNode RESULT =null;
		Location boolExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location boolExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		BoolExprNode boolExpr = (BoolExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location compStat1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location compStat1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		CompStatNode compStat1 = (CompStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location compStat2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location compStat2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		CompStatNode compStat2 = (CompStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG27

					RESULT = new IfThenElseNode(boolExpr, compStat1, compStat2);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Simple_stat ::= IF LPAR Bool_expr RPAR THEN Comp_stat SEMI 
            {
              SimpleStatNode RESULT =null;
		Location boolExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location boolExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		BoolExprNode boolExpr = (BoolExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location compStatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location compStatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		CompStatNode compStat = (CompStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG28

					RESULT = new IfThenNode(boolExpr, compStat);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Simple_stat ::= WHILE LPAR Bool_expr RPAR DO Comp_stat SEMI 
            {
              SimpleStatNode RESULT =null;
		Location boolExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location boolExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		BoolExprNode boolExpr = (BoolExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location compStatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location compStatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		CompStatNode compStat = (CompStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG29

					RESULT = new WhileNode(boolExpr, compStat);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Out_values ::= Expr COMMA Out_values 
            {
              ArrayList<OutValueNode> RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location outValuesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location outValuesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<OutValueNode> outValues = (ArrayList<OutValueNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30

				   outValues.add(expr);
				   RESULT = outValues;
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Out_values ::= STRING_CONST COMMA Out_values 
            {
              ArrayList<OutValueNode> RESULT =null;
		Location stringConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stringConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location outValuesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location outValuesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<OutValueNode> outValues = (ArrayList<OutValueNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31

				   StringConstNode outValueStr = new StringConstNode(stringConst);
				   outValues.add(outValueStr);
				   RESULT = outValues;
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Out_values ::= Expr 
            {
              ArrayList<OutValueNode> RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32

				   RESULT = new ArrayList<OutValueNode>();
				   RESULT.add(expr);
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Out_values ::= STRING_CONST 
            {
              ArrayList<OutValueNode> RESULT =null;
		Location stringConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stringConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33

				   RESULT = new ArrayList<OutValueNode>();
				   StringConstNode outValueStr = new StringConstNode(stringConst);
				   RESULT.add(outValueStr);
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Params ::= Exprs 
            {
              ArrayList<ExprNode> RESULT =null;
		Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<ExprNode> exprs = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34

			   RESULT = exprs;
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Params ::= 
            {
              ArrayList<ExprNode> RESULT =null;
		//@@CUPDBG35

			   RESULT = new ArrayList<ExprNode>();
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<ExprNode> RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayList<ExprNode> exprs = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36

			  exprs.add(expr);
			  RESULT = exprs;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exprs ::= Expr 
            {
              ArrayList<ExprNode> RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37

			  RESULT = new ArrayList<ExprNode>();
			  RESULT.add(expr);
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= INT_CONST 
            {
              ExprNode RESULT =null;
		Location intConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location intConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer intConst = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38

			 RESULT = new IntConstNode(intConst);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= DOUBLE_CONST 
            {
              ExprNode RESULT =null;
		Location doubleConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location doubleConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double doubleConst = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39

			 RESULT = new DoubleConstNode(doubleConst);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= Expr Arith_op Expr 
            {
              ExprNode RESULT =null;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location arithOpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arithOpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Character arithOp = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40

			 RESULT = new ArithOpNode(arithOp, expr1, expr2);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= NAME 
            {
              ExprNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41

			 RESULT = new IdentifierNode(name);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= MINUS Expr 
            {
              ExprNode RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42

			 RESULT = new UMinusNode(expr);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= LPAR Expr RPAR 
            {
              ExprNode RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG43

			 RESULT = expr;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arith_op ::= PLUS 
            {
              Character RESULT =null;
		//@@CUPDBG44

				 RESULT = '+';
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arith_op ::= MINUS 
            {
              Character RESULT =null;
		//@@CUPDBG45

				 RESULT = '-';
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arith_op ::= TIMES 
            {
              Character RESULT =null;
		//@@CUPDBG46

				 RESULT = '*';
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Arith_op ::= DIV 
            {
              Character RESULT =null;
		//@@CUPDBG47

				 RESULT = '/';
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool_expr ::= TRUE 
            {
              BoolExprNode RESULT =null;
		//@@CUPDBG48

				  RESULT = new BoolValueNode(true);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool_expr ::= FALSE 
            {
              BoolExprNode RESULT =null;
		//@@CUPDBG49

				  RESULT = new BoolValueNode(false);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool_expr ::= NOT Bool_expr 
            {
              BoolExprNode RESULT =null;
		Location boolExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location boolExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BoolExprNode boolExpr = (BoolExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50

				  RESULT = new NotNode(boolExpr);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool_expr ::= Expr Rel_op Expr 
            {
              BoolExprNode RESULT =null;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location relOpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location relOpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String relOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51

				  RESULT = new RelOpNode(relOp, expr1, expr2);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool_expr ::= LPAR Bool_expr RPAR 
            {
              BoolExprNode RESULT =null;
		Location boolExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location boolExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BoolExprNode boolExpr = (BoolExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG52

				  RESULT = boolExpr;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool_expr ::= Bool_expr Bool_op Bool_expr 
            {
              BoolExprNode RESULT =null;
		Location boolExpr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location boolExpr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		BoolExprNode boolExpr1 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location boolOpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location boolOpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String boolOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location boolExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location boolExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BoolExprNode boolExpr2 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53

				  RESULT = new BoolOpNode(boolOp, boolExpr1, boolExpr2);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool_op ::= AND 
            {
              String RESULT =null;
		//@@CUPDBG54

				RESULT = "&&";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bool_op ::= OR 
            {
              String RESULT =null;
		//@@CUPDBG55

				RESULT = "||";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Rel_op ::= GT 
            {
              String RESULT =null;
		//@@CUPDBG56

			   RESULT = ">";
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Rel_op ::= GE 
            {
              String RESULT =null;
		//@@CUPDBG57

			   RESULT = ">=";
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Rel_op ::= LT 
            {
              String RESULT =null;
		//@@CUPDBG58

			   RESULT = "<";
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Rel_op ::= LE 
            {
              String RESULT =null;
		//@@CUPDBG59

			   RESULT = "<=";
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Rel_op ::= EQ 
            {
              String RESULT =null;
		//@@CUPDBG60

			   RESULT = "==";
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
