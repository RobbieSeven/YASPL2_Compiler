package compiler;

import java_cup.runtime.*;
import compiler.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import nodes.*;

/* Terminals */
terminal String 	HEAD, START, DEF, IF, THEN, ELSE, WHILE, DO;
terminal String 	NAME, INT, DOUBLE, BOOL;
terminal Character 	ASSIGN, PLUS, MINUS, TIMES, DIV, UMINUS;
terminal String 	EQ, LT, LE, GT, GE, AND, OR, NOT, READ, WRITE;
terminal Character 	LPAR, RPAR, LGPAR, RGPAR, COMMA, COLON, SEMI;
terminal Integer 	INT_CONST;
terminal Double 	DOUBLE_CONST;
terminal String 	STRING_CONST;
terminal Boolean 	TRUE, FALSE;

/* Non terminals */
non terminal ProgramNode				Program;
non terminal ArrayList<DeclNode>		Decls;
non terminal ArrayList<StatNode>		Statements;
non terminal VarDeclNode				Var_decl;
non terminal String						Type;
non terminal VarsNode					Vars;
non terminal ArrayList<String>			Types;
non terminal DefDeclNode				Def_decl;
non terminal ArrayList<VarDeclNode>		Var_decls;
non terminal ArrayList<VarDeclNode>		Par_decls;
non terminal BodyNode			    	Body;
non terminal CompStatNode				Comp_stat;
non terminal StatNode					Stat;
non terminal SimpleStatNode				Simple_stat;
non terminal ArrayList<OutValueNode>	Out_values;
non terminal ArrayList<ExprNode>		Params;
non terminal ArrayList<ExprNode>		Exprs;
non terminal ExprNode					Expr;
non terminal Character					Arith_op;
non terminal BoolExprNode				Bool_expr;
non terminal String						Bool_op;
non terminal String						Rel_op;

/* Precedences */
precedence left 	COMMA;
precedence left 	OR;
precedence left 	AND;
precedence left 	PLUS, MINUS;
precedence left 	TIMES, DIV;
precedence right 	NOT;
precedence left 	UMINUS;

/* Productions */
Program ::= HEAD Decls:decls START Statements:stats {:
				RESULT = new ProgramNode(decls, stats);
			:};
Var_decl ::= Type:type Vars:vars SEMI {:
				 RESULT = new VarDeclNode(type, vars);
			 :};
Decls ::= Var_decl:varDecl Decls:decls {:
			  decls.add(varDecl);
			  RESULT = decls;
		  :}
		| Def_decl:defDecl Decls:decls {:
			  decls.add(defDecl);
			  RESULT = decls;
		  :}
		| {:
			  RESULT = new ArrayList<DeclNode>();
		  :};
Statements ::= Stat:stat Statements:statements {:
				   statements.add(stat);
				   RESULT = statements;
			   :}
			 | Stat:stat {:
				   RESULT = new ArrayList<StatNode>();
				   RESULT.add(stat);
			   :};
Type ::= INT {:
			 RESULT = "int";
		 :}
	   | DOUBLE {:
			 RESULT = "double";
		 :}
	   | BOOL {:
			 RESULT = "bool";
		 :};
Vars ::= NAME:name COMMA Vars:vars {:
			 IdentifierNode id = new IdentifierNode(name);
			 RESULT = new VarsNode(id, vars);
		 :}
	   | NAME:name {:
			 IdentifierNode id = new IdentifierNode(name);
			 RESULT = new VarsNode(id, null);
		 :};
Types ::= Type:type COMMA Types:types {:
			  types.add(type);
			  RESULT = types;
		  :}
		| Type:type {:
			  RESULT = new ArrayList<String>();
			  RESULT.add(type);
		  :};
Def_decl ::= DEF NAME:name LPAR Var_decls:varDecls RPAR COLON Par_decls:parDecls Body:body {:
				 IdentifierNode id = new IdentifierNode(name);
				 RESULT = new DefDeclNode(id, varDecls, parDecls, body);
			 :};
Var_decls ::= Var_decl:varDecl Var_decls:varDecls {:
				  varDecls.add(varDecl);
				  RESULT = varDecls;
			  :}
			| {:
				  RESULT = new ArrayList<VarDeclNode>();
			  :};
Par_decls ::= Var_decl:varDecl Par_decls:parDecls {:
				  parDecls.add(varDecl);
				  RESULT = parDecls;
			  :}
			| Var_decl:varDecl {:
				  RESULT = new ArrayList<VarDeclNode>();
				  RESULT.add(varDecl);
			  :};
Body ::= LGPAR Var_decls:varDecls Statements:statements RGPAR SEMI {:
			 RESULT = new BodyNode(varDecls, statements);
		 :};
Comp_stat ::= LGPAR Statements:statements RGPAR {:
				  RESULT = new CompStatNode(statements);
			  :};
Stat ::= Comp_stat:compStat {:
			 RESULT = compStat;
		 :}
	   | Simple_stat:simpleStat {:
			 RESULT = simpleStat;
		 :};
Simple_stat ::= Vars:vars READ Types:types SEMI {:
					RESULT = new ReadNode(vars.getNames(), types);
				:}
              | Out_values:outValues WRITE SEMI {:
					RESULT = new WriteNode(outValues);
				:}
              | NAME:name ASSIGN Expr:expr SEMI {:
					IdentifierNode id = new IdentifierNode(name);
					RESULT = new AssignNode(id, expr);
				:}
              | NAME:name LPAR Params:params COLON Vars:vars RPAR SEMI {:
					IdentifierNode id = new IdentifierNode(name);
					RESULT = new CallNode(id, params, vars.getNames());
				:}
              | IF LPAR Bool_expr:boolExpr RPAR THEN Comp_stat:compStat1 ELSE Comp_stat:compStat2 SEMI {:
					RESULT = new IfThenElseNode(boolExpr, compStat1, compStat2);
				:}
              | IF LPAR Bool_expr:boolExpr RPAR THEN Comp_stat:compStat SEMI {:
					RESULT = new IfThenNode(boolExpr, compStat);
				:}
              | WHILE LPAR Bool_expr:boolExpr RPAR DO Comp_stat:compStat SEMI {:
					RESULT = new WhileNode(boolExpr, compStat);
				:};
Out_values ::= Expr:expr COMMA Out_values:outValues {:
				   outValues.add(expr);
				   RESULT = outValues;
			   :}
             | STRING_CONST:stringConst COMMA Out_values:outValues {:
				   StringConstNode outValueStr = new StringConstNode(stringConst);
				   outValues.add(outValueStr);
				   RESULT = outValues;
			   :}
             | Expr:expr {:
				   RESULT = new ArrayList<OutValueNode>();
				   RESULT.add(expr);
			   :}
             | STRING_CONST:stringConst {:
				   RESULT = new ArrayList<OutValueNode>();
				   StringConstNode outValueStr = new StringConstNode(stringConst);
				   RESULT.add(outValueStr);
			   :};
Params ::= Exprs:exprs {:
			   RESULT = exprs;
		   :}
		 | {:
			   RESULT = new ArrayList<ExprNode>();
		   :};
Exprs ::= Expr:expr COMMA Exprs:exprs {:
			  exprs.add(expr);
			  RESULT = exprs;
		  :}
		| Expr:expr {:
			  RESULT = new ArrayList<ExprNode>();
			  RESULT.add(expr);
		  :};
Expr ::= INT_CONST:intConst {:
			 RESULT = new IntConstNode(intConst);
		 :}
	   | DOUBLE_CONST:doubleConst {:
			 RESULT = new DoubleConstNode(doubleConst);
		 :}
	   | Expr:expr1 Arith_op:arithOp Expr:expr2 {:
			 RESULT = new ArithOpNode(arithOp, expr1, expr2);
		 :}
	   | NAME:name {:
			 RESULT = new IdentifierNode(name);
		 :}
	   | MINUS Expr:expr {:
			 RESULT = new UMinusNode(expr);
		 :}
		 %prec UMINUS
	   | LPAR Expr:expr RPAR {:
			 RESULT = expr;
		 :};
Arith_op ::= PLUS {:
				 RESULT = '+';
			 :}
		   | MINUS {:
				 RESULT = '-';
			 :}
		   | TIMES {:
				 RESULT = '*';
			 :}
		   | DIV {:
				 RESULT = '/';
			 :};
Bool_expr ::= TRUE {:
				  RESULT = new BoolValueNode(true);
			  :}
			| FALSE {:
				  RESULT = new BoolValueNode(false);
			  :}
			| NOT Bool_expr:boolExpr {:
				  RESULT = new NotNode(boolExpr);
			  :}
			| Expr:expr1 Rel_op:relOp Expr:expr2 {:
				  RESULT = new RelOpNode(relOp, expr1, expr2);
			  :}
            | LPAR Bool_expr:boolExpr RPAR {:
				  RESULT = boolExpr;
			  :}
			| Bool_expr:boolExpr1 Bool_op:boolOp Bool_expr:boolExpr2 {:
				  RESULT = new BoolOpNode(boolOp, boolExpr1, boolExpr2);
			  :};
Bool_op ::= AND {:
				RESULT = "&&";
			:}
		  | OR {:
				RESULT = "||";
			:};
Rel_op ::= GT {:
			   RESULT = ">";
		   :}
		 | GE {:
			   RESULT = ">=";
		   :}
		 | LT {:
			   RESULT = "<";
		   :}
		 | LE {:
			   RESULT = "<=";
		   :}
		 | EQ {:
			   RESULT = "==";
		   :};
